class DBHelper{static get ROOT_URL(){let e=window.location.pathname;const t=e.lastIndexOf("/");return t>=0&&(e=e.substring(0,t)),console.log(e),e}static get DATABASE_URL(){const e=`${DBHelper.ROOT_URL}data/restaurants.json`;return console.log(e),e}static fetchRestaurants(e){let t=new XMLHttpRequest;t.open("GET",DBHelper.DATABASE_URL),t.onload=(()=>{if(200===t.status){const s=JSON.parse(t.responseText).restaurants;e(null,s)}else{const s=`Request failed. Returned status of ${t.status}`;e(s,null)}}),t.send()}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((s,l)=>{if(s)t(s,null);else{const s=l.find(t=>t.id==e);s?t(null,s):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((s,l)=>{if(s)t(s,null);else{const s=l.filter(t=>t.cuisine_type==e);t(null,s)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((s,l)=>{if(s)t(s,null);else{const s=l.filter(t=>t.neighborhood==e);t(null,s)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,s){DBHelper.fetchRestaurants((l,n)=>{if(l)s(l,null);else{let l=n;"all"!=e&&(l=l.filter(t=>t.cuisine_type==e)),"all"!=t&&(l=l.filter(e=>e.neighborhood==t)),s(null,l)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,s)=>{if(t)e(t,null);else{const t=s.map((e,t)=>s[t].neighborhood),l=t.filter((e,s)=>t.indexOf(e)==s);e(null,l)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,s)=>{if(t)e(t,null);else{const t=s.map((e,t)=>s[t].cuisine_type),l=t.filter((e,s)=>t.indexOf(e)==s);e(null,l)}})}static urlForRestaurant(e){return`${DBHelper.ROOT_URL}restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e,t=null){let s=e.photograph;return t&&(s=s.replace(/.jpg$/,`${t}.jpg`)),`${DBHelper.ROOT_URL}img/${s}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}